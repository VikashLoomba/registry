openapi: 3.1.0
info:
  title: MCP Server Registry API
  summary: API for discovering and accessing MCP servers metadata
  description: |
    REST API that centralizes metadata about publicly available MCP servers by allowing server creators to submit
    and maintain metadata about their servers in a standardized format. This API enables MCP client
    applications and "server aggregator" type consumers to discover and install MCP servers.
  version: 0.0.1
  contact:
    name: MCP Community Working Group
  license:
    name: MIT
    identifier: MIT
servers:
  # TODO: Still think a unique name would be better; maybe we open a public discussion on the topic and let people submit ideas?
  - url: https://registry.modelcontextprotocol.io
    description: MCP Server Registry
# TODO: Webhooks here would be interesting, but out of scope for MVP

paths:
  /v0/servers:
    get:
      summary: List MCP servers
      description: Returns a list of all registered MCP servers
      parameters:
        - name: limit
          in: query
          description: Number of results per page (maximum 5000)
          schema:
            type: integer
            default: 5000
            maximum: 5000
            minimum: 1
        - name: offset
          in: query
          description: Number of results to skip for pagination
          schema:
            type: integer
            default: 0
            minimum: 0
      responses:
        '200':
          description: A list of MCP servers
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerList'
  /v0/search:
    get:
      summary: Search MCP servers
      description: Search for MCP servers by name with optional filtering by registry and repository URL
      parameters:
        - name: q
          in: query
          description: Search query string for text matching against server names (case-insensitive)
          schema:
            type: string
          required: false
        - name: registry_name
          in: query
          description: Filter results to only show servers available in the specified registry (e.g., "npm", "docker")
          schema:
            type: string
          required: false
        - name: url
          in: query
          description: Filter results to only show servers with the specified repository URL (exact match)
          schema:
            type: string
            format: uri
          required: false
        - name: limit
          in: query
          description: Maximum number of results to return (default 30, maximum 100)
          schema:
            type: integer
            default: 30
            maximum: 100
            minimum: 1
        - name: cursor
          in: query
          description: Pagination cursor for retrieving next set of results
          schema:
            type: string
            format: uuid
          required: false
      responses:
        '200':
          description: A list of MCP servers matching the search criteria
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerList'
        '400':
          description: Bad request (invalid parameters)
          content:
            text/plain:
              schema:
                type: string
  /v0/authorize:
    post:
      summary: Generate ephemeral token for GitHub users
      description: |
        Validates a GitHub token and generates a short-lived ephemeral token that can be used 
        to publish OSS servers to the registry. The ephemeral token expires after 1 hour.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthorizeRequest'
      responses:
        '200':
          description: Ephemeral token generated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthorizeResponse'
        '400':
          description: Bad request (invalid or missing GitHub token)
          content:
            text/plain:
              schema:
                type: string
        '401':
          description: Unauthorized (invalid GitHub token)
          content:
            text/plain:
              schema:
                type: string
  /v0/publish-oss:
    post:
      summary: Publish open source MCP server
      description: |
        Publishes an open source MCP server to the registry by providing a GitHub repository URL
        and package information. The endpoint automatically fetches repository information and creates 
        server metadata. At least one package must be provided in the request.
        Requires either an ephemeral token (from /v0/authorize) or registry owner token.
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PublishOSSRequest'
      responses:
        '201':
          description: OSS server published successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublishOSSResponse'
        '400':
          description: Bad request (invalid repository URL or request payload)
          content:
            text/plain:
              schema:
                type: string
        '401':
          description: Unauthorized (missing or invalid authorization token)
          content:
            text/plain:
              schema:
                type: string
        '403':
          description: Forbidden (valid token but insufficient permissions)
          content:
            text/plain:
              schema:
                type: string
        '409':
          description: Conflict (server with this name already exists)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictErrorResponse'
        '500':
          description: Internal server error
          content:
            text/plain:
              schema:
                type: string
  /v0/servers/{id}:
    get:
      summary: Get MCP server details
      description: Returns detailed information about a specific MCP server
      parameters:
        - name: id
          in: path
          required: true
          description: Unique ID of the server
          schema:
            type: string
            format: uuid
        - name: version
          in: query
          description: Desired MCP server version
          schema:
            type: string
      responses:
        '200':
          description: Detailed server information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerDetail'
        '404':
          description: Server not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Server not found"
components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: token
      description: |
        Bearer token authentication. Accepts either:
        - Ephemeral token (obtained from /v0/authorize endpoint)
        - Registry owner GitHub token
  schemas:
    jsonSchemaDialect: "https://json-schema.org/draft/2020-12/schema"
    Repository:
      type: object
      required:
        - url
        - source
        - id
      properties:
        url:
          type: string
          format: uri
          example: "https://github.com/modelcontextprotocol/servers"
        source:
          type: string
          enum: [github, gitlab] # TODO: Add all supported sources as a whitelist
          example: "github"
        id:
          type: string
          example: "b94b5f7e-c7c6-d760-2c78-a5e9b8a5b8c9"

    Server:
      type: object
      required:
        - id
        - name
        - description
        - version_detail
      properties:
        id:
          type: string
          format: uuid
          example: "a5e8a7f0-d4e4-4a1d-b12f-2896a23fd4f1"
        name:
          type: string
          example: "@modelcontextprotocol/servers/src/filesystem"
        description:
          type: string
          example: "Node.js server implementing Model Context Protocol (MCP) for filesystem operations."
        repository:
          $ref: '#/components/schemas/Repository'
        version_detail:
          type: object
          required:
            - version
            - release_date
            - is_latest
          properties:
            version:
              type: string
              example: "1.0.2"
              description: Equivalent of Implementation.version in MCP specification.
            release_date:
              type: string
              format: date-time
              example: "2023-06-15T10:30:00Z"
              description: Datetime that the MCP server version was published to the registry.
            is_latest:
              type: boolean
              example: true
              description: Whether the MCP server version is the latest version available in the registry.
      $schema: "https://json-schema.org/draft/2020-12/schema"

    ServerList:
      type: object
      required:
        - servers
        - total_count
      properties:
        servers:
          type: array
          items:
            $ref: '#/components/schemas/Server'
        next:
          type: string
          format: uri
          example: "https://registry.modelcontextprotocol.io/servers?offset=50"
        total_count:
          type: integer
          example: 1

    Package:
      type: object
      required:
        - registry_name
        - name
        - version
      properties:
        registry_name:
          type: string
          enum: [npm, docker, pypi, homebrew]
          example: "npm"
        name:
          type: string
          example: "io.modelcontextprotocol/filesystem"
        version:
          type: string
          example: "1.0.2"
        runtime_hint:
          type: string
          description: A hint to help clients determine the appropriate runtime for the package. This field should be provided when `runtime_arguments` are present.
          examples: [npx, uvx]
        runtime_arguments:
          type: array
          description: A list of arguments to be passed to the package's runtime command (such as docker or npx). The `runtime_hint` field should be provided when `runtime_arguments` are present.
          items:
            $ref: '#/components/schemas/Argument'
        package_arguments:
          type: array
          description: A list of arguments to be passed to the package's binary.
          items:
            $ref: '#/components/schemas/Argument'
        environment_variables:
          type: array
          description: A mapping of environment variables to be set when running the package.
          items:
            $ref: '#/components/schemas/KeyValueInput'

    Input:
      type: object
      properties:
        description:
          description: A description of the input, which clients can use to provide context to the user.
          type: string
        is_required:
          type: boolean
          default: false
        format:
          type: string
          description: |
            Specifies the input format. Supported values include `filepath`, which should be interpreted as a file on the user's filesystem.

            When the input is converted to a string, booleans should be represented by the strings "true" and "false", and numbers should be represented as decimal values.
          enum: [string, number, boolean, filepath]
          default: string
        value:
          type: string
          description: |
            The default value for the input. If this is not set, the user may be prompted to provide a value.

            Identifiers wrapped in `{curly_braces}` will be replaced with the corresponding properties from the input `variables` map. If an identifier in braces is not found in `variables`, or if `variables` is not provided, the `{curly_braces}` substring should remain unchanged.
        is_secret:
          type: boolean
          description: Indicates whether the input is a secret value (e.g., password, token). If true, clients should handle the value securely.
          default: false
        default:
          type: string
          description: The default value for the input.
        choices:
          type: array
          description: A list of possible values for the input. If provided, the user must select one of these values.
          items:
            type: string
          example: []

    InputWithVariables:
      allOf:
        - $ref: '#/components/schemas/Input'
        - type: object
          properties:
            variables:
              type: object
              description: A map of variable names to their values. Keys in the input `value` that are wrapped in `{curly_braces}` will be replaced with the corresponding variable values.
              additionalProperties:
                $ref: '#/components/schemas/Input'

    PositionalArgument:
      description: A positional input is a value inserted verbatim into the command line.
      allOf:
        - $ref: '#/components/schemas/InputWithVariables'
        - type: object
          required:
            - type
            - value_hint
          properties:
            type:
              type: string
              enum: [positional]
              example: "positional"
            value_hint:
              type: string
              description: An identifier-like hint for the value. This is not part of the command line, but can be used by client configuration and to provide hints to users.
              example: file_path
            is_repeated:
              type: boolean
              description: Whether the argument can be repeated multiple times in the command line.
              default: false

    NamedArgument:
      description: A command-line `--flag={value}`.
      allOf:
        - $ref: '#/components/schemas/InputWithVariables'
        - type: object
          required:
            - type
            - name
          properties:
            type:
              type: string
              enum: [named]
              example: "named"
            name:
              type: string
              description: The flag name, including any leading dashes.
              example: "--port"
            is_repeated:
              type: boolean
              description: Whether the argument can be repeated multiple times.
              default: false

    KeyValueInput:
      allOf:
        - $ref: '#/components/schemas/InputWithVariables'
        - type: object
          required:
            - name
          properties:
            name:
              type: string
              description: Name of the header or environment variable.
              example: SOME_VARIABLE

    Argument:
      anyOf:
        - $ref: '#/components/schemas/PositionalArgument'
        - $ref: '#/components/schemas/NamedArgument'

    Remote:
      type: object
      required:
        - transport_type
        - url
      properties:
        transport_type:
          type: string
          enum: [streamable, sse]
          example: "sse"
        url:
          type: string
          format: uri
          example: "https://mcp-fs.example.com/sse"
        headers:
          type: array
          items:
            $ref: '#/components/schemas/KeyValueInput'

    ServerDetail:
      allOf:
        - $ref: '#/components/schemas/Server'
        - type: object
          properties:
            packages:
              type: array
              items:
                $ref: '#/components/schemas/Package'
            remotes:
              type: array
              items:
                $ref: '#/components/schemas/Remote'

    AuthorizeRequest:
      type: object
      required:
        - github_token
      properties:
        github_token:
          type: string
          description: GitHub personal access token or OAuth token
          example: "gho_xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"

    AuthorizeResponse:
      type: object
      required:
        - ephemeral_token
        - expires_in
      properties:
        ephemeral_token:
          type: string
          description: Base64-encoded ephemeral token for publishing OSS servers
          example: "eyJjbGFpbXMiOnsibmFtZSI6ImpvaG4iLCJleHAiOjE2MjM0NTY3ODl9LCJzaWduYXR1cmUiOiJhYmMxMjMifQ=="
        expires_in:
          type: integer
          description: Token expiration time in seconds (always 3600 for 1 hour)
          example: 3600

    PublishOSSRequest:
      type: object
      required:
        - repository_url
        - packages
      properties:
        repository_url:
          type: string
          format: uri
          description: |
            GitHub repository URL in any supported format:
            - https://github.com/owner/repo
            - https://github.com/owner/repo.git
            - git@github.com:owner/repo.git
          example: "https://github.com/modelcontextprotocol/servers"
        owner:
          type: string
          description: |
            GitHub repository owner (optional). If provided along with 'repo', 
            these values will be used instead of extracting from repository_url.
          example: "modelcontextprotocol"
        repo:
          type: string
          description: |
            GitHub repository name (optional). If provided along with 'owner', 
            these values will be used instead of extracting from repository_url.
          example: "servers"
        packages:
          type: array
          description: List of packages for the MCP server (at least one package is required)
          minItems: 1
          items:
            $ref: '#/components/schemas/Package'

    PublishOSSResponse:
      type: object
      required:
        - message
        - id
        - name
        - repository
        - published_by
      properties:
        message:
          type: string
          example: "OSS server publication successful"
        id:
          type: string
          format: uuid
          description: Unique server ID assigned by the registry
          example: "a5e8a7f0-d4e4-4a1d-b12f-2896a23fd4f1"
        name:
          type: string
          description: Server name in the format io.github.owner/repo
          example: "io.github.modelcontextprotocol/servers"
        repository:
          $ref: '#/components/schemas/Repository'
        published_by:
          type: string
          description: GitHub username of the user who published the server
          example: "octocat"

    ConflictErrorResponse:
      type: object
      required:
        - error
        - message
        - name
      properties:
        error:
          type: string
          example: "Server already exists"
        message:
          type: string
          example: "A server with name 'io.github.owner/repo' has already been published to the registry"
        name:
          type: string
          description: The conflicting server name
          example: "io.github.owner/repo"
